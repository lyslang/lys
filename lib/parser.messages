program: UNIT
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expected a declaration starting with ‘def’ or a comment enclosed in backticks. Standalone expressions are not allowed at the top level.

program: KWDEF UNIT
##
## Ends in an error in state: 1.
##
## decl -> KWDEF . olid list(located(param)) option(ann) EQUAL expr [ KWDEF EOF COMMENT ]
## decl -> KWDEF . UID COLONEQUAL list(located(LID)) LBRACE nonempty_list(located(variant)) RBRACE [ KWDEF EOF COMMENT ]
## decl -> KWDEF . UID COLONEQUAL typing [ KWDEF EOF COMMENT ]
##
## The known suffix of the stack is as follows:
## KWDEF
##

Expected an identifier after ‘def’. Use lowercase for functions/values or uppercase for types/ADTs.

program: KWDEF UID UNIT
##
## Ends in an error in state: 3.
##
## decl -> KWDEF UID . COLONEQUAL list(located(LID)) LBRACE nonempty_list(located(variant)) RBRACE [ KWDEF EOF COMMENT ]
## decl -> KWDEF UID . COLONEQUAL typing [ KWDEF EOF COMMENT ]
##
## The known suffix of the stack is as follows:
## KWDEF UID
##

Expected ‘:=’ after type name for a type definition.

program: KWDEF UID COLONEQUAL UNIT
##
## Ends in an error in state: 4.
##
## decl -> KWDEF UID COLONEQUAL . list(located(LID)) LBRACE nonempty_list(located(variant)) RBRACE [ KWDEF EOF COMMENT ]
## decl -> KWDEF UID COLONEQUAL . typing [ KWDEF EOF COMMENT ]
##
## The known suffix of the stack is as follows:
## KWDEF UID COLONEQUAL
##

Expected either a type definition or type parameters (lowercase identifiers) for an ADT definition.

program: KWDEF UID COLONEQUAL UID UNDERSCORE
##
## Ends in an error in state: 5.
##
## typing1 -> UID . option(located(typing1)) [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## UID
##

Invalid type constructor application. Type arguments must be valid types.

program: KWDEF UID COLONEQUAL LPAREN UNIT
##
## Ends in an error in state: 6.
##
## typing1 -> LPAREN . separated_nonempty_list(COMMA,located(typing)) RPAREN [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
## typing1 -> LPAREN . typing RPAREN [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expected a type expression inside parentheses. For tuple types, specify at least one type.

program: KWDEF UID COLONEQUAL LBRACKET UNIT
##
## Ends in an error in state: 8.
##
## typing1 -> LBRACKET . typing RBRACKET [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Expected a type expression inside brackets for a list type, e.g., [Int] or [String].

program: KWDEF UID COLONEQUAL KWBOOL UNDERSCORE
##
## Ends in an error in state: 14.
##
## typing -> typing1 . ARROW typing [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
## typing -> typing1 . [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## typing1
##

Unexpected token after type. For function types, use the arrow ‘->’ syntax.

program: KWDEF UID COLONEQUAL LID ARROW UNIT
##
## Ends in an error in state: 15.
##
## typing -> typing1 ARROW . typing [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## typing1 ARROW
##

Expected return type after ‘->’ in function type definition.

program: KWDEF UID COLONEQUAL LBRACKET UID UNIT
##
## Ends in an error in state: 17.
##
## typing1 -> LBRACKET typing . RBRACKET [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET typing
##

Expected closing bracket ‘]’ after list type definition.

program: KWDEF UID COLONEQUAL LPAREN UID UNIT
##
## Ends in an error in state: 19.
##
## separated_nonempty_list(COMMA,located(typing)) -> typing . [ RPAREN ]
## separated_nonempty_list(COMMA,located(typing)) -> typing . COMMA separated_nonempty_list(COMMA,located(typing)) [ RPAREN ]
## typing1 -> LPAREN typing . RPAREN [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN typing
##

Expected either a comma ‘,’ for tuple types or closing parenthesis ‘)’ for grouped types.

program: KWDEF UID COLONEQUAL LPAREN UID COMMA UNIT
##
## Ends in an error in state: 21.
##
## separated_nonempty_list(COMMA,located(typing)) -> typing COMMA . separated_nonempty_list(COMMA,located(typing)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typing COMMA
##

Expected another type after comma in tuple type definition.

program: KWDEF UID COLONEQUAL LPAREN UID COMMA UID UNIT
##
## Ends in an error in state: 22.
##
## separated_nonempty_list(COMMA,located(typing)) -> typing . [ RPAREN ]
## separated_nonempty_list(COMMA,located(typing)) -> typing . COMMA separated_nonempty_list(COMMA,located(typing)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typing
##

Expected either a comma ‘,’ for more tuple elements or closing parenthesis ‘)’ to complete the tuple type.

program: KWDEF UID COLONEQUAL LID UNIT
##
## Ends in an error in state: 28.
##
## list(located(LID)) -> LID . list(located(LID)) [ LBRACE ]
## typing1 -> LID . [ KWDEF EOF COMMENT ARROW ]
##
## The known suffix of the stack is as follows:
## LID
##

Expected ‘{’ after type parameters for an ADT definition, or use a valid type expression for a type alias.

program: KWDEF UID COLONEQUAL LID LID UNIT
##
## Ends in an error in state: 29.
##
## list(located(LID)) -> LID . list(located(LID)) [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LID
##

Expected ‘{’ after type parameters to begin ADT variant definitions.

program: KWDEF UID COLONEQUAL LBRACE UNIT
##
## Ends in an error in state: 33.
##
## decl -> KWDEF UID COLONEQUAL list(located(LID)) LBRACE . nonempty_list(located(variant)) RBRACE [ KWDEF EOF COMMENT ]
##
## The known suffix of the stack is as follows:
## KWDEF UID COLONEQUAL list(located(LID)) LBRACE
##

Expected at least one variant definition for an ADT. Each variant should start with an uppercase identifier.

program: KWDEF UID COLONEQUAL LBRACE UID UNIT
##
## Ends in an error in state: 34.
##
## variant -> UID . option(located(typing)) SEMICOLON [ UID RBRACE ]
##
## The known suffix of the stack is as follows:
## UID
##

Expected optional type information followed by a semicolon ‘;’ after variant name.

program: KWDEF UID COLONEQUAL LBRACE UID UID UNIT
##
## Ends in an error in state: 36.
##
## variant -> UID option(located(typing)) . SEMICOLON [ UID RBRACE ]
##
## The known suffix of the stack is as follows:
## UID option(located(typing))
##

Expected a semicolon ‘;’ after variant definition.

program: KWDEF UID COLONEQUAL LBRACE UID SEMICOLON UNIT
##
## Ends in an error in state: 38.
##
## nonempty_list(located(variant)) -> variant . [ RBRACE ]
## nonempty_list(located(variant)) -> variant . nonempty_list(located(variant)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## variant
##

Expected either another variant definition (starting with an uppercase identifier) or ‘}’ to close the ADT definition.

program: KWDEF LID UNIT
##
## Ends in an error in state: 43.
##
## decl -> KWDEF olid . list(located(param)) option(ann) EQUAL expr [ KWDEF EOF COMMENT ]
##
## The known suffix of the stack is as follows:
## KWDEF olid
##

Expected parameters (if any) followed by ‘=’ and an expression body for the definition.

program: KWDEF LID LPAREN UNIT
##
## Ends in an error in state: 44.
##
## tuple_param -> LPAREN . separated_nonempty_list(COMMA,located(param)) RPAREN [ RPAREN LPAREN LID EQUAL COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expected parameter(s) inside parentheses for a tuple parameter.

program: KWDEF LID LPAREN LID UNIT
##
## Ends in an error in state: 49.
##
## separated_nonempty_list(COMMA,located(param)) -> param . [ RPAREN ]
## separated_nonempty_list(COMMA,located(param)) -> param . COMMA separated_nonempty_list(COMMA,located(param)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param
##

Expected either a comma ‘,’ for more parameters or closing parenthesis ‘)’ to complete the tuple parameter.

program: KWDEF LID LPAREN LID COMMA UNIT
##
## Ends in an error in state: 50.
##
## separated_nonempty_list(COMMA,located(param)) -> param COMMA . separated_nonempty_list(COMMA,located(param)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

Expected another parameter after comma in tuple parameter.

program: KWDEF LID LID UNIT
##
## Ends in an error in state: 52.
##
## list(located(param)) -> param . list(located(param)) [ EQUAL COLON ]
##
## The known suffix of the stack is as follows:
## param
##

Expected either a type annotation ‘:’ or ‘=’ followed by the function body.

program: KWDEF LID COLON UNIT
##
## Ends in an error in state: 55.
##
## ann -> COLON . typing [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expected type annotation after colon.

program: KWDEF LID COLON UID UNIT
##
## Ends in an error in state: 57.
##
## decl -> KWDEF olid list(located(param)) option(ann) . EQUAL expr [ KWDEF EOF COMMENT ]
##
## The known suffix of the stack is as follows:
## KWDEF olid list(located(param)) option(ann)
##

Expected ‘=’ after function declaration to define the body.

program: KWDEF LID EQUAL UNDERSCORE
##
## Ends in an error in state: 58.
##
## decl -> KWDEF olid list(located(param)) option(ann) EQUAL . expr [ KWDEF EOF COMMENT ]
##
## The known suffix of the stack is as follows:
## KWDEF olid list(located(param)) option(ann) EQUAL
##

Expected an expression for the function body.

program: KWDEF LID EQUAL LPAREN UNDERSCORE
##
## Ends in an error in state: 64.
##
## expr11 -> LPAREN . loption(separated_nonempty_list(COMMA,located(expr))) RPAREN [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
## expr11 -> LPAREN . expr RPAREN [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expected an expression or a comma-separated list of expressions inside parentheses.

program: KWDEF LID EQUAL LBRACKET UNDERSCORE
##
## Ends in an error in state: 66.
##
## expr11 -> LBRACKET . loption(separated_nonempty_list(COMMA,located(expr))) RBRACKET [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Expected expressions separated by commas or closing bracket ‘]’ for an empty list.

program: KWDEF LID EQUAL KWMATCH UNDERSCORE
##
## Ends in an error in state: 67.
##
## expr11 -> KWMATCH . expr LBRACE nonempty_list(located(case)) RBRACE [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWMATCH
##

Expected an expression to match against after ‘match’ keyword.

program: KWDEF LID EQUAL KWLET UNIT
##
## Ends in an error in state: 68.
##
## expr11 -> KWLET . separated_nonempty_list(SEMICOLON,located(bind)) KWIN expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWLET
##

Expected binding(s) after ‘let’ keyword. Bindings should be of form ‘name = expression’.

program: KWDEF LID EQUAL KWLET LID UNIT
##
## Ends in an error in state: 69.
##
## bind -> LID . list(located(param)) option(ann) EQUAL expr [ SEMICOLON KWIN ]
##
## The known suffix of the stack is as follows:
## LID
##

Expected ‘=’ after name in let binding, or parameters if defining a local function.

program: KWDEF LID EQUAL KWLET LID COLON UID UNIT
##
## Ends in an error in state: 71.
##
## bind -> LID list(located(param)) option(ann) . EQUAL expr [ SEMICOLON KWIN ]
##
## The known suffix of the stack is as follows:
## LID list(located(param)) option(ann)
##

Expected ‘=’ after binding name and optional type annotation.

program: KWDEF LID EQUAL KWLET LID EQUAL UNDERSCORE
##
## Ends in an error in state: 72.
##
## bind -> LID list(located(param)) option(ann) EQUAL . expr [ SEMICOLON KWIN ]
##
## The known suffix of the stack is as follows:
## LID list(located(param)) option(ann) EQUAL
##

Expected an expression after ‘=’ in let binding.

program: KWDEF LID EQUAL KWIF UNDERSCORE
##
## Ends in an error in state: 73.
##
## expr11 -> KWIF . expr KWTHEN expr KWELSE expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWIF
##

Expected a condition expression after ‘if’ keyword.

program: KWDEF LID EQUAL BACKSLASH UNIT
##
## Ends in an error in state: 78.
##
## expr11 -> BACKSLASH . nonempty_list(located(param)) ARROW expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BACKSLASH
##

Expected at least one parameter after ‘\’ for lambda expression.

program: KWDEF LID EQUAL BACKSLASH LID UNIT
##
## Ends in an error in state: 79.
##
## nonempty_list(located(param)) -> param . [ ARROW ]
## nonempty_list(located(param)) -> param . nonempty_list(located(param)) [ ARROW ]
##
## The known suffix of the stack is as follows:
## param
##

Expected ‘->’ after parameters in lambda expression.

program: KWDEF LID EQUAL BACKSLASH LID ARROW UNDERSCORE
##
## Ends in an error in state: 82.
##
## expr11 -> BACKSLASH nonempty_list(located(param)) ARROW . expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BACKSLASH nonempty_list(located(param)) ARROW
##

Expected body expression after ‘->’ in lambda expression.

program: KWDEF LID EQUAL BANG UNDERSCORE
##
## Ends in an error in state: 83.
##
## expr7 -> un_op . expr8 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## un_op
##

Expected an expression after unary operator.

program: KWDEF LID EQUAL BOOL AMPERSAND UNDERSCORE
##
## Ends in an error in state: 90.
##
## expr9 -> expr9 bit_op . expr10 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr9 bit_op
##

Expected right operand for bitwise operation.

program: KWDEF LID EQUAL BOOL AMPERSAND BOOL UNDERSCORE
##
## Ends in an error in state: 92.
##
## expr10 -> expr10 . expr11 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
## expr9 -> expr9 bit_op expr10 . [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr9 bit_op expr10
##

Unexpected token after binary expression. Consider adding parentheses to clarify precedence.

program: KWDEF LID EQUAL BOOL STARSTAR UNDERSCORE
##
## Ends in an error in state: 95.
##
## expr8 -> expr8 STARSTAR . expr9 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr8 STARSTAR
##

Expected right operand for exponentiation operation.

program: KWDEF LID EQUAL BOOL UNDERSCORE
##
## Ends in an error in state: 97.
##
## expr10 -> expr10 . expr11 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
## expr9 -> expr10 . [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr10
##

Unexpected token in expression. Function application must have arguments.

program: KWDEF LID EQUAL BOOL PERCENT UNDERSCORE
##
## Ends in an error in state: 104.
##
## expr6 -> expr6 mul_op . expr7 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr6 mul_op
##

Expected right operand for multiplication operator.

program: KWDEF LID EQUAL BOOL PLUSPLUS UNDERSCORE
##
## Ends in an error in state: 107.
##
## expr4 -> expr5 PLUSPLUS . expr4 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr5 PLUSPLUS
##

Expected right operand for list concatenation operator ‘++’.

program: KWDEF LID EQUAL BOOL MINUS UNDERSCORE
##
## Ends in an error in state: 111.
##
## expr5 -> expr5 add_op . expr6 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr5 add_op
##

Expected right operand for addition/subtraction operator.

program: KWDEF LID EQUAL BOOL TRIANGLE UNDERSCORE
##
## Ends in an error in state: 115.
##
## expr3 -> expr3 TRIANGLE . expr4 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr3 TRIANGLE
##

Expected right operand for pipe operator ‘▷’.

program: KWDEF LID EQUAL BOOL BANGEQUAL UNDERSCORE
##
## Ends in an error in state: 126.
##
## expr2 -> expr2 comp_op . expr3 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr2 comp_op
##

Expected right operand for comparison operator.

program: KWDEF LID EQUAL BOOL ANDAND UNDERSCORE
##
## Ends in an error in state: 132.
##
## expr1 -> expr1 bool_op . expr2 [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr1 bool_op
##

Expected right operand for logical operator.

program: KWDEF LID EQUAL KWIF BOOL ARROW
##
## Ends in an error in state: 136.
##
## expr11 -> KWIF expr . KWTHEN expr KWELSE expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWIF expr
##

Expected ‘then’ after the condition in an if expression.

program: KWDEF LID EQUAL KWIF BOOL KWTHEN UNDERSCORE
##
## Ends in an error in state: 137.
##
## expr11 -> KWIF expr KWTHEN . expr KWELSE expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWIF expr KWTHEN
##

Expected an expression for the ‘then’ branch of an if expression.

program: KWDEF LID EQUAL KWIF BOOL KWTHEN BOOL ARROW
##
## Ends in an error in state: 138.
##
## expr11 -> KWIF expr KWTHEN expr . KWELSE expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWIF expr KWTHEN expr
##

Expected ‘else’ after the ‘then’ branch of an if expression.

program: KWDEF LID EQUAL KWIF BOOL KWTHEN BOOL KWELSE UNDERSCORE
##
## Ends in an error in state: 139.
##
## expr11 -> KWIF expr KWTHEN expr KWELSE . expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWIF expr KWTHEN expr KWELSE
##

Expected an expression for the ‘else’ branch of an if expression.

program: KWDEF LID EQUAL KWLET LID EQUAL BOOL KWIN UNDERSCORE
##
## Ends in an error in state: 143.
##
## expr11 -> KWLET separated_nonempty_list(SEMICOLON,located(bind)) KWIN . expr [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWLET separated_nonempty_list(SEMICOLON,located(bind)) KWIN
##

Expected an expression after ‘in’ in a let expression.

program: KWDEF LID EQUAL KWLET LID EQUAL BOOL ARROW
##
## Ends in an error in state: 145.
##
## separated_nonempty_list(SEMICOLON,located(bind)) -> bind . [ KWIN ]
## separated_nonempty_list(SEMICOLON,located(bind)) -> bind . SEMICOLON separated_nonempty_list(SEMICOLON,located(bind)) [ KWIN ]
##
## The known suffix of the stack is as follows:
## bind
##

Expected ‘in’ after binding(s), or ‘;’ to add more bindings.

program: KWDEF LID EQUAL KWLET LID EQUAL BOOL SEMICOLON UNIT
##
## Ends in an error in state: 146.
##
## separated_nonempty_list(SEMICOLON,located(bind)) -> bind SEMICOLON . separated_nonempty_list(SEMICOLON,located(bind)) [ KWIN ]
##
## The known suffix of the stack is as follows:
## bind SEMICOLON
##

Expected another binding after ‘;’ in let expression.

program: KWDEF LID EQUAL KWMATCH BOOL ARROW
##
## Ends in an error in state: 148.
##
## expr11 -> KWMATCH expr . LBRACE nonempty_list(located(case)) RBRACE [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWMATCH expr
##

Expected ‘{’ after expression in match statement.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UNIT
##
## Ends in an error in state: 149.
##
## expr11 -> KWMATCH expr LBRACE . nonempty_list(located(case)) RBRACE [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## KWMATCH expr LBRACE
##

Expected at least one case pattern in match expression.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID UNIT
##
## Ends in an error in state: 150.
##
## pattern1 -> UID . list(located(pattern1)) [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
##
## The known suffix of the stack is as follows:
## UID
##

Expected ‘->’, ‘if’, or pattern parameters after constructor in pattern.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LPAREN UNIT
##
## Ends in an error in state: 152.
##
## pattern1 -> LPAREN . pattern RPAREN [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
## tuple_pat -> LPAREN . separated_nonempty_list(COMMA,located(pattern)) RPAREN [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expected pattern inside parentheses.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LBRACKET UNIT
##
## Ends in an error in state: 153.
##
## list_pat -> LBRACKET . loption(separated_nonempty_list(COMMA,located(pattern))) RBRACKET [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
## list_spd_pat -> LBRACKET . separated_nonempty_list(COMMA,located(pattern)) ELLIPSIS RBRACKET [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Expected patterns or ‘]’ for an empty list pattern.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LBRACKET UID RPAREN
##
## Ends in an error in state: 158.
##
## list_spd_pat -> LBRACKET separated_nonempty_list(COMMA,located(pattern)) . ELLIPSIS RBRACKET [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
## loption(separated_nonempty_list(COMMA,located(pattern))) -> separated_nonempty_list(COMMA,located(pattern)) . [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## LBRACKET separated_nonempty_list(COMMA,located(pattern))
##

Expected either ‘]’ to close list pattern or ‘...’ for matching rest of list.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LBRACKET UID ELLIPSIS UNIT
##
## Ends in an error in state: 159.
##
## list_spd_pat -> LBRACKET separated_nonempty_list(COMMA,located(pattern)) ELLIPSIS . RBRACKET [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET separated_nonempty_list(COMMA,located(pattern)) ELLIPSIS
##

Expected closing bracket ‘]’ after list spread pattern.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LID UNIT
##
## Ends in an error in state: 161.
##
## pattern -> pattern1 . SEMICOLON pattern [ RPAREN RBRACKET KWIF ELLIPSIS COMMA ARROW ]
## pattern -> pattern1 . [ RPAREN RBRACKET KWIF ELLIPSIS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## pattern1
##

Expected ‘->’ after pattern or ‘;’ to start alternative pattern.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID SEMICOLON UNIT
##
## Ends in an error in state: 162.
##
## pattern -> pattern1 SEMICOLON . pattern [ RPAREN RBRACKET KWIF ELLIPSIS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## pattern1 SEMICOLON
##

Expected another pattern after ‘;’ in pattern alternative.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LBRACKET UID KWIF
##
## Ends in an error in state: 167.
##
## separated_nonempty_list(COMMA,located(pattern)) -> pattern . [ RPAREN RBRACKET ELLIPSIS ]
## separated_nonempty_list(COMMA,located(pattern)) -> pattern . COMMA separated_nonempty_list(COMMA,located(pattern)) [ RPAREN RBRACKET ELLIPSIS ]
##
## The known suffix of the stack is as follows:
## pattern
##

Expected ‘,’ for more pattern items or closing delimiter for pattern list.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LBRACKET UID COMMA UNIT
##
## Ends in an error in state: 168.
##
## separated_nonempty_list(COMMA,located(pattern)) -> pattern COMMA . separated_nonempty_list(COMMA,located(pattern)) [ RPAREN RBRACKET ELLIPSIS ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

Expected another pattern after comma in pattern list.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LPAREN UID COMMA UID RBRACKET
##
## Ends in an error in state: 172.
##
## tuple_pat -> LPAREN separated_nonempty_list(COMMA,located(pattern)) . RPAREN [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN separated_nonempty_list(COMMA,located(pattern))
##

Expected closing parenthesis ‘)’ after tuple pattern.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE LPAREN UID RBRACKET
##
## Ends in an error in state: 174.
##
## pattern1 -> LPAREN pattern . RPAREN [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
## separated_nonempty_list(COMMA,located(pattern)) -> pattern . [ RPAREN ]
## separated_nonempty_list(COMMA,located(pattern)) -> pattern . COMMA separated_nonempty_list(COMMA,located(pattern)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN pattern
##

Expected closing parenthesis ‘)’ after pattern or comma for tuple pattern.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID LID UNIT
##
## Ends in an error in state: 176.
##
## list(located(pattern1)) -> pattern1 . list(located(pattern1)) [ UNDERSCORE UID STRING SEMICOLON RPAREN RBRACKET LPAREN LID LBRACKET KWIF INT FLOAT ELLIPSIS COMMA BOOL ARROW ]
##
## The known suffix of the stack is as follows:
## pattern1
##

Expected ‘->’ or more pattern parameters for constructor pattern.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID RPAREN
##
## Ends in an error in state: 179.
##
## case -> pattern . ARROW expr SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
## case -> pattern . KWIF expr ARROW expr SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## pattern
##

Expected ‘->’ or ‘if’ after pattern in match case.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID KWIF UNDERSCORE
##
## Ends in an error in state: 180.
##
## case -> pattern KWIF . expr ARROW expr SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## pattern KWIF
##

Expected a guard expression after ‘if’ in match case. This expression must evaluate to a boolean.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID KWIF BOOL SEMICOLON
##
## Ends in an error in state: 181.
##
## case -> pattern KWIF expr . ARROW expr SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## pattern KWIF expr
##

Expected ‘->’ after guard condition in match case.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID KWIF BOOL ARROW UNDERSCORE
##
## Ends in an error in state: 182.
##
## case -> pattern KWIF expr ARROW . expr SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## pattern KWIF expr ARROW
##

Expected an expression for the match case body after ‘->’.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID KWIF BOOL ARROW BOOL ARROW
##
## Ends in an error in state: 183.
##
## case -> pattern KWIF expr ARROW expr . SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## pattern KWIF expr ARROW expr
##

Expected a semicolon ‘;’ after match case body.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID ARROW UNDERSCORE
##
## Ends in an error in state: 185.
##
## case -> pattern ARROW . expr SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

Expected an expression for the match case body after ‘->’.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID ARROW BOOL ARROW
##
## Ends in an error in state: 186.
##
## case -> pattern ARROW expr . SEMICOLON [ UNDERSCORE UID STRING RBRACE LPAREN LID LBRACKET INT FLOAT BOOL ]
##
## The known suffix of the stack is as follows:
## pattern ARROW expr
##

Expected a semicolon ‘;’ after match case body.

program: KWDEF LID EQUAL KWMATCH BOOL LBRACE UID ARROW BOOL SEMICOLON UNIT
##
## Ends in an error in state: 190.
##
## nonempty_list(located(case)) -> case . [ RBRACE ]
## nonempty_list(located(case)) -> case . nonempty_list(located(case)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case
##

Expected either another pattern case or closing brace ‘}’ to end the match expression.

program: KWDEF LID EQUAL LBRACKET BOOL RPAREN
##
## Ends in an error in state: 193.
##
## expr11 -> LBRACKET loption(separated_nonempty_list(COMMA,located(expr))) . RBRACKET [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET loption(separated_nonempty_list(COMMA,located(expr)))
##

Expected closing bracket ‘]’ to end the list literal. Found ‘)’ instead.

program: KWDEF LID EQUAL LBRACKET BOOL ARROW
##
## Ends in an error in state: 195.
##
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##

Expected either a comma ‘,’ for more list items or closing bracket ‘]’ to complete the list.

program: KWDEF LID EQUAL LBRACKET BOOL COMMA UNDERSCORE
##
## Ends in an error in state: 196.
##
## separated_nonempty_list(COMMA,located(expr)) -> expr COMMA . separated_nonempty_list(COMMA,located(expr)) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

Expected another expression after comma in list literal.

program: KWDEF LID EQUAL LPAREN BOOL COMMA BOOL RBRACKET
##
## Ends in an error in state: 198.
##
## expr11 -> LPAREN loption(separated_nonempty_list(COMMA,located(expr))) . RPAREN [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,located(expr)))
##

Expected closing parenthesis ‘)’ to end the tuple or grouped expression. Found ‘]’ instead.

program: KWDEF LID EQUAL LPAREN BOOL ARROW
##
## Ends in an error in state: 200.
##
## expr11 -> LPAREN expr . RPAREN [ UNIT UID TRIANGLE TILDETILDE STRING STARSTAR STAR SLASH SEMICOLON RPAREN RIGHT RBRACKET PLUSPLUS PLUS PERCENT MINUS LT LPAREN LID LEQ LEFT LBRACKET LBRACE KWTHEN KWMATCH KWLET KWIN KWIF KWELSE KWDEF INT HAT GT GEQ FLOAT EQUALEQUAL EOF COMMENT COMMA COLON BOOL BARBAR BAR BANGTILDE BANGEQUAL BACKSLASH ARROW ANDAND AMPERSAND ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,located(expr)) -> expr . COMMA separated_nonempty_list(COMMA,located(expr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

Expected either a comma ‘,’ for tuple elements or closing parenthesis ‘)’ to complete the expression.

program: COMMENT RIGHT
##
## Ends in an error in state: 207.
##
## list(located(decl)) -> decl . list(located(decl)) [ EOF ]
##
## The known suffix of the stack is as follows:
## decl
##

Unexpected token after declaration. Expected another declaration or end of file.
