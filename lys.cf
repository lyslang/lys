{-
 - SPDX-FileCopyrightText: 2025 Aljebriq <143266740+aljebriq@users.noreply.github.com>
 - SPDX-FileCopyrightText: 2025 Łukasz Bartkiewicz <lukasku@proton.me>
 -
 - SPDX-License-Identifier: GPL-3.0-only
 -}

entrypoints Program ;

Prog. Program ::= [Decl] ;

Decl.      Decl ::= "def" OLID [Param] "=" Expr ;
TypedDecl. Decl ::= "def" OLID [Param] ":" Type "=" Expr ;
UnionDecl. Decl ::= "uni" UID [LID] [Variant] ;
SynDecl.   Decl ::= "syn" UID "=" Type ;
terminator Decl "" ;

Wildcard. OLID ::= "_" ;
L.        OLID ::= LID ;
separator nonempty OLID "," ;

PRLID.    Param ::= LID ;
PRTuple.  Param ::= TupleParam ;
separator Param " " ;

TupleParam. TupleParam ::= "(" [OLID] ")" ;

ETyped.  Expr ::= Expr1 ":" Type ;
EBoolOp. Expr1 ::= Expr1 BoolOp Expr2 ;
ECompOp. Expr2 ::= Expr2 CompOp Expr3 ;
EPipe.   Expr3 ::= Expr3 "|>" Expr4 ;
EConcat. Expr4 ::= Expr5 "++" Expr4 ;
EAddOp.  Expr5 ::= Expr5 AddOp Expr6 ;
EMulOp.  Expr6 ::= Expr6 MulOp Expr7 ;
EUnOp.   Expr7 ::= UnOp Expr8 ;
EExpOp.  Expr8 ::= Expr8 "**" Expr9 ;
EBitOp.  Expr9 ::= Expr9 BitOp Expr10 ;
EApp.    Expr10 ::= Expr10 Expr11 ;
ELambda. Expr11 ::= "λ" [SOLID] "." Expr ;
EMatch.  Expr11 ::= "match" Expr [Case] ;
ELet.    Expr11 ::= "let" [Bind] "in" Expr ;
EIf.     Expr11 ::= "if" Expr "then" Expr "else" Expr ;
EUID.    Expr11 ::= UID ;
ELID.    Expr11 ::= LID ;
ETuple.  Expr11 ::= "(" [Expr] ")" ;
EList.   Expr11 ::= "[" [Expr] "]" ;
EUnit.   Expr11 ::= "()" ;
EFalse.  Expr11 ::= "False" ;
ETrue.   Expr11 ::= "True" ;
EString. Expr11 ::= STRING ;
EFloat.  Expr11 ::= FLOAT ;
EInt.    Expr11 ::= INT ;
coercions Expr 11 ;
separator Expr "," ;

SOLID. SOLID ::= OLID ;
separator nonempty SOLID " " ;

OpBoolAnd.   BoolOp ::= "&&" ;
OpBoolOr.    BoolOp ::= "||" ;
OpGt.        CompOp ::= ">" ;
OpGeq.       CompOp ::= ">=" ;
OpLt.        CompOp ::= "<" ;
OpLeq.       CompOp ::= "<=" ;
OpEq.        CompOp ::= "==" ;
OpFeq.       CompOp ::= "~~" ;
OpNeq.       CompOp ::= "!=" ;
OpNFeq.      CompOp ::= "!~" ;
OpAdd.       AddOp ::= "+" ;
OpSub.       AddOp ::= "-" ;
OpMul.       MulOp ::= "*" ;
OpDiv.       MulOp ::= "/" ;
OpMod.       MulOp ::= "%" ;
UnPlus.      UnOp ::= "+" ;
UnNeg.       UnOp ::= "-" ;
UnBoolNot.   UnOp ::= "!" ;
OpBitLShift. BitOp ::= "<<" ;
OpBitRShift. BitOp ::= ">>" ;
OpBitAnd.    BitOp ::= "&" ;
OpBitOr.     BitOp ::= "|" ;
OpBitXor.    BitOp ::= "^" ;

Case.      Case ::= "(" [BPattern] "->" Expr ")" ;
CaseGuard. Case ::= "(" [BPattern] "if" Expr "->" Expr ")" ;
separator nonempty Case "" ;

BPattern. BPattern ::= "{" Pattern "}" ;
separator nonempty BPattern " " ;

PInt.         Pattern ::= INT ;
PFloat.       Pattern ::= FLOAT ;
PString.      Pattern ::= STRING ;
PTrue.        Pattern ::= "True" ;
PFalse.       Pattern ::= "False" ;
PUnit.        Pattern ::= "()" ;
POLID.        Pattern ::= OLID ;
PConstructor. Pattern ::= UID [OSOLID] ;
PList.        Pattern ::= "[" [OSPattern] "]" ;
PListSpd.     Pattern ::= "[" [Pattern] "…" "]" ;
PTuple.       Pattern ::= "(" [Pattern] ")" ;
separator nonempty Pattern "," ;

OPattern. OSPattern ::= Pattern ;
separator OSPattern " " ;

OSOLID. OSOLID ::= OLID ;
separator OSOLID " " ;

OOLID. OOLID ::= OLID ;
separator OOLID "," ;

Bind.      Bind ::= LID "=" Expr ;
TypedBind. Bind ::= LID ":" Type "=" Expr ;
separator nonempty Bind ";" ;

Variant. Variant ::= "(" UID [OSType] ")" ;
terminator nonempty Variant "" ;

OSType. OSType ::= Type ;
separator OSType " " ;

TFunc.        Type  ::= Type1 "->" Type ;
TInt.         Type1 ::= "Int" ;
TFloat.       Type1 ::= "Float" ;
TString.      Type1 ::= "String" ;
TBool.        Type1 ::= "Bool" ;
TUnit.        Type1 ::= "Unit" ;
TList.        Type1 ::= "[" Type "]" ;
TTuple.       Type1 ::= "(" [Type] ")" ;
TPoly.        Type1 ::= LID ;
TConstructor. Type1 ::= UID [OSType] ;
coercions Type 1 ;
separator nonempty Type "," ;

token INT ((digit (digit | '_')* (('e' | 'E') ('+' | '-')? digit (digit | '_')*)?) | ('0' ('x' | 'X') (digit | ["abcdefABCDEF"]) (digit | ["abcdefABCDEF_"])*) | ('0' ('o' | 'O') ["01234567"] ["01234567_"]*) | ('0' ('b' | 'B') ["01"] ["01_"]*)) ;
token FLOAT (digit (digit | '_')* '.' digit (digit | '_')* (('e' | 'E') ('+' | '-')? digit (digit | '_')*)?) ;
token STRING ('"' ((char - ["\"\\"]) | ('\\' ["\"\\'ntbr "]) | ('\\' digit digit digit) | ('\\' 'x' (digit | ["abcdefABCDEF"]) (digit | ["abcdefABCDEF"])) | ('\\' 'o' ["0123"] ["01234567"] ["01234567"]) | ('\\' 'u' '{' (digit | ["abcdefABCDEF"])+ '}'))* '"') ;
token UID (upper (letter | digit)* '\''*) ;
-- LID is also used for polymorphic types.
token LID (lower (letter | digit)* '\''*) ;
separator LID " " ;

comment "`" "`" ;
